{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://itz.am",
      "description": "Itzam Live API"
    }
  ],
  "info": {
    "title": "Itzam API",
    "description": "Development documentation",
    "version": "1.0.0"
  },
  "components": {
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Api-Key",
        "description": "The API key to use for authentication"
      }
    },
    "schemas": {
      "GenerateTextResponse": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "example": "Renewable energy is...",
            "description": "The generated output text"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "runId": {
                "type": "string",
                "example": "run_1234567890",
                "description": "The ID of the run created for this generation"
              },
              "cost": {
                "type": "string",
                "example": "0.001",
                "description": "The cost of the run"
              },
              "model": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "gpt-4o",
                    "description": "The name of the model used for this generation"
                  },
                  "tag": {
                    "type": "string",
                    "example": "openai:gpt-4o",
                    "description": "The tag of the model used for this generation"
                  }
                },
                "required": [
                  "name",
                  "tag"
                ]
              },
              "durationInMs": {
                "type": "number",
                "example": 1000,
                "description": "The duration of the run in milliseconds"
              },
              "inputTokens": {
                "type": "number",
                "example": 1000,
                "description": "The number of input tokens used for this generation"
              },
              "outputTokens": {
                "type": "number",
                "example": 1000,
                "description": "The number of output tokens used for this generation"
              }
            },
            "required": [
              "runId",
              "cost",
              "model",
              "durationInMs",
              "inputTokens",
              "outputTokens"
            ]
          }
        },
        "required": [
          "text",
          "metadata"
        ]
      },
      "TextCompletionEventInput": {
        "type": "object",
        "properties": {
          "input": {
            "type": "string",
            "minLength": 1,
            "example": "Tell me about renewable energy",
            "description": "The input text to generate a response for"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file": {
                  "anyOf": [
                    {
                      "type": "string",
                      "format": "byte",
                      "description": "Base64 encoded file"
                    },
                    {
                      "type": "string",
                      "format": "uri",
                      "description": "Remote URI to the file"
                    }
                  ]
                },
                "mimeType": {
                  "type": "string"
                }
              },
              "required": [
                "file"
              ]
            },
            "example": [
              {
                "file": "file_data",
                "mimeType": "application/pdf"
              },
              {
                "file": "image_data",
                "mimeType": "image/png"
              },
              {
                "file": "https://example.com/image.jpg"
              }
            ],
            "description": "Optional attachments to include in the generation"
          },
          "contextSlugs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "special-docs",
              "admin-files"
            ],
            "description": "Optional context slugs to add contexts to the run"
          },
          "type": {
            "type": "string",
            "const": "event"
          },
          "callback": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "example": "https://example.com/callback",
                "description": "Callback URL to send events to"
              },
              "customProperties": {
                "type": "object",
                "additionalProperties": {}
              },
              "headers": {
                "type": "object",
                "additionalProperties": {}
              }
            },
            "required": [
              "url"
            ]
          },
          "workflowSlug": {
            "type": "string",
            "example": "my_great_workflow",
            "description": "The slug of the Workflow to use for generation"
          }
        },
        "required": [
          "input",
          "type",
          "callback",
          "workflowSlug"
        ]
      },
      "TextCompletionInput": {
        "type": "object",
        "properties": {
          "input": {
            "type": "string",
            "minLength": 1,
            "example": "Tell me about renewable energy",
            "description": "The input text to generate a response for"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file": {
                  "anyOf": [
                    {
                      "type": "string",
                      "format": "byte",
                      "description": "Base64 encoded file"
                    },
                    {
                      "type": "string",
                      "format": "uri",
                      "description": "Remote URI to the file"
                    }
                  ]
                },
                "mimeType": {
                  "type": "string"
                }
              },
              "required": [
                "file"
              ]
            },
            "example": [
              {
                "file": "file_data",
                "mimeType": "application/pdf"
              },
              {
                "file": "image_data",
                "mimeType": "image/png"
              },
              {
                "file": "https://example.com/image.jpg"
              }
            ],
            "description": "Optional attachments to include in the generation"
          },
          "contextSlugs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "special-docs",
              "admin-files"
            ],
            "description": "Optional context slugs to add contexts to the run"
          },
          "workflowSlug": {
            "type": "string",
            "example": "my_great_workflow",
            "description": "The slug of the Workflow to use for generation (required if threadId is not provided)"
          },
          "threadId": {
            "type": "string",
            "example": "thread_1234567890",
            "description": "Optional thread ID to associate this run with a conversation thread (required if workflowSlug is not provided)"
          }
        },
        "required": [
          "input"
        ]
      },
      "GenerateObjectResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "object",
            "additionalProperties": {},
            "description": "The generated object based on the provided schema"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "runId": {
                "type": "string",
                "example": "run_1234567890",
                "description": "The ID of the run created for this generation"
              },
              "cost": {
                "type": "string",
                "example": "0.001",
                "description": "The cost of the run"
              },
              "model": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "gpt-4o",
                    "description": "The name of the model used for this generation"
                  },
                  "tag": {
                    "type": "string",
                    "example": "openai:gpt-4o",
                    "description": "The tag of the model used for this generation"
                  }
                },
                "required": [
                  "name",
                  "tag"
                ]
              },
              "durationInMs": {
                "type": "number",
                "example": 1000,
                "description": "The duration of the run in milliseconds"
              },
              "inputTokens": {
                "type": "number",
                "example": 1000,
                "description": "The number of input tokens used for this generation"
              },
              "outputTokens": {
                "type": "number",
                "example": 1000,
                "description": "The number of output tokens used for this generation"
              }
            },
            "required": [
              "runId",
              "cost",
              "model",
              "durationInMs",
              "inputTokens",
              "outputTokens"
            ]
          }
        },
        "required": [
          "object",
          "metadata"
        ]
      },
      "ObjectCompletionEventInput": {
        "type": "object",
        "properties": {
          "input": {
            "type": "string",
            "minLength": 1,
            "example": "Tell me about renewable energy",
            "description": "The input text to generate a response for"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file": {
                  "anyOf": [
                    {
                      "type": "string",
                      "format": "byte",
                      "description": "Base64 encoded file"
                    },
                    {
                      "type": "string",
                      "format": "uri",
                      "description": "Remote URI to the file"
                    }
                  ]
                },
                "mimeType": {
                  "type": "string"
                }
              },
              "required": [
                "file"
              ]
            },
            "example": [
              {
                "file": "file_data",
                "mimeType": "application/pdf"
              },
              {
                "file": "image_data",
                "mimeType": "image/png"
              },
              {
                "file": "https://example.com/image.jpg"
              }
            ],
            "description": "Optional attachments to include in the generation"
          },
          "contextSlugs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "special-docs",
              "admin-files"
            ],
            "description": "Optional context slugs to add contexts to the run"
          },
          "type": {
            "type": "string",
            "const": "event"
          },
          "callback": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "example": "https://example.com/callback",
                "description": "Callback URL to send events to"
              },
              "customProperties": {
                "type": "object",
                "additionalProperties": {}
              },
              "headers": {
                "type": "object",
                "additionalProperties": {}
              }
            },
            "required": [
              "url"
            ]
          },
          "workflowSlug": {
            "type": "string",
            "example": "my_great_workflow",
            "description": "The slug of the Workflow to use for generation"
          },
          "schema": {
            "example": {
              "type": "object",
              "title": "User Profile",
              "description": "A user profile object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The user's full name"
                },
                "age": {
                  "type": "number",
                  "description": "The user's age"
                },
                "interests": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of user interests"
                }
              },
              "required": [
                "name",
                "age"
              ]
            },
            "description": "A valid JSON Schema object defining the structure of the expected response. Must have a 'type' property set to 'object', 'array', or 'string' (with enum). See https://json-schema.org/ for full specification."
          }
        },
        "required": [
          "input",
          "type",
          "callback",
          "workflowSlug",
          "schema"
        ]
      },
      "ObjectCompletionInput": {
        "type": "object",
        "properties": {
          "input": {
            "type": "string",
            "minLength": 1,
            "example": "Tell me about renewable energy",
            "description": "The input text to generate a response for"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file": {
                  "anyOf": [
                    {
                      "type": "string",
                      "format": "byte",
                      "description": "Base64 encoded file"
                    },
                    {
                      "type": "string",
                      "format": "uri",
                      "description": "Remote URI to the file"
                    }
                  ]
                },
                "mimeType": {
                  "type": "string"
                }
              },
              "required": [
                "file"
              ]
            },
            "example": [
              {
                "file": "file_data",
                "mimeType": "application/pdf"
              },
              {
                "file": "image_data",
                "mimeType": "image/png"
              },
              {
                "file": "https://example.com/image.jpg"
              }
            ],
            "description": "Optional attachments to include in the generation"
          },
          "contextSlugs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "special-docs",
              "admin-files"
            ],
            "description": "Optional context slugs to add contexts to the run"
          },
          "workflowSlug": {
            "type": "string",
            "example": "my_great_workflow",
            "description": "The slug of the Workflow to use for generation (required if threadId is not provided)"
          },
          "threadId": {
            "type": "string",
            "example": "thread_1234567890",
            "description": "Optional thread ID to associate this run with a conversation thread (required if workflowSlug is not provided)"
          },
          "schema": {
            "example": {
              "type": "object",
              "title": "User Profile",
              "description": "A user profile object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The user's full name"
                },
                "age": {
                  "type": "number",
                  "description": "The user's age"
                },
                "interests": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of user interests"
                }
              },
              "required": [
                "name",
                "age"
              ]
            },
            "description": "A valid JSON Schema object defining the structure of the expected response. Must have a 'type' property set to 'object', 'array', or 'string' (with enum). See https://json-schema.org/ for full specification."
          }
        },
        "required": [
          "input",
          "schema"
        ]
      },
      "StreamTextEvent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/StreamTextEventObject"
          },
          {
            "$ref": "#/components/schemas/StreamTextEventTextDelta"
          },
          {
            "$ref": "#/components/schemas/StreamTextEventError"
          },
          {
            "$ref": "#/components/schemas/StreamTextEventFinish"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "object": "#/components/schemas/StreamTextEventObject",
            "text-delta": "#/components/schemas/StreamTextEventTextDelta",
            "error": "#/components/schemas/StreamTextEventError",
            "finish": "#/components/schemas/StreamTextEventFinish"
          }
        }
      },
      "StreamTextEventObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "object"
          },
          "object": {
            "type": "object",
            "properties": {
              "output": {
                "type": "string"
              }
            },
            "required": [
              "output"
            ]
          }
        },
        "required": [
          "type",
          "object"
        ]
      },
      "StreamTextEventTextDelta": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "text-delta"
          },
          "textDelta": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "textDelta"
        ]
      },
      "StreamTextEventError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "error"
          },
          "error": {}
        },
        "required": [
          "type"
        ]
      },
      "StreamTextEventFinish": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "finish"
          },
          "finishReason": {
            "type": "string",
            "enum": [
              "stop",
              "length",
              "content-filter",
              "tool-calls",
              "error",
              "other",
              "unknown"
            ]
          },
          "usage": {
            "type": "object",
            "properties": {
              "promptTokens": {
                "type": "number"
              },
              "completionTokens": {
                "type": "number"
              },
              "totalTokens": {
                "type": "number"
              }
            },
            "required": [
              "promptTokens",
              "completionTokens",
              "totalTokens"
            ]
          }
        },
        "required": [
          "type",
          "finishReason",
          "usage"
        ]
      },
      "StreamEvent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/StreamEventObject"
          },
          {
            "$ref": "#/components/schemas/StreamEventTextDelta"
          },
          {
            "$ref": "#/components/schemas/StreamEventError"
          },
          {
            "$ref": "#/components/schemas/StreamEventFinish"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "object": "#/components/schemas/StreamEventObject",
            "text-delta": "#/components/schemas/StreamEventTextDelta",
            "error": "#/components/schemas/StreamEventError",
            "finish": "#/components/schemas/StreamEventFinish"
          }
        }
      },
      "StreamEventObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "object"
          },
          "object": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StreamEventObjectText"
              },
              {
                "$ref": "#/components/schemas/StreamEventObjectUnknown"
              }
            ]
          }
        },
        "required": [
          "type",
          "object"
        ]
      },
      "StreamEventObjectText": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "StreamEventObjectUnknown": {
        "type": "object",
        "properties": {
          "object": {}
        },
        "description": "Used for structured responses, based on the schema"
      },
      "StreamEventTextDelta": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "text-delta"
          },
          "textDelta": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "textDelta"
        ]
      },
      "StreamEventError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "error"
          },
          "error": {}
        },
        "required": [
          "type"
        ]
      },
      "StreamEventFinish": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "finish"
          },
          "finishReason": {
            "type": "string",
            "enum": [
              "stop",
              "length",
              "content-filter",
              "tool-calls",
              "error",
              "other",
              "unknown"
            ]
          },
          "usage": {
            "type": "object",
            "properties": {
              "promptTokens": {
                "type": "number"
              },
              "completionTokens": {
                "type": "number"
              },
              "totalTokens": {
                "type": "number"
              }
            },
            "required": [
              "promptTokens",
              "completionTokens",
              "totalTokens"
            ]
          }
        },
        "required": [
          "type",
          "finishReason",
          "usage"
        ]
      },
      "GetRunByIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "run_1234567890",
            "description": "The ID of the run"
          },
          "origin": {
            "type": "string",
            "example": "API",
            "description": "The origin of the run"
          },
          "status": {
            "type": "string",
            "example": "COMPLETED",
            "description": "The status of the run"
          },
          "input": {
            "type": "string",
            "example": "Who are you?",
            "description": "The input of the run"
          },
          "output": {
            "type": "string",
            "example": "I'm a helpful assistant",
            "description": "The output of the run"
          },
          "prompt": {
            "type": "string",
            "example": "Be friendly and helpful",
            "description": "The prompt of the run"
          },
          "inputTokens": {
            "type": "number",
            "example": 100,
            "description": "The number of input tokens of the run"
          },
          "outputTokens": {
            "type": "number",
            "example": 100,
            "description": "The number of output tokens of the run"
          },
          "cost": {
            "type": "string",
            "example": "0.001",
            "description": "The cost of the run"
          },
          "durationInMs": {
            "type": "number",
            "example": 100,
            "description": "The duration of the run in milliseconds"
          },
          "threadId": {
            "type": [
              "string",
              "null"
            ],
            "example": "thread_1234567890",
            "description": "The thread ID of the run"
          },
          "model": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "GPT-4o",
                "description": "The name of the model"
              },
              "tag": {
                "type": "string",
                "example": "openai:gpt-4o",
                "description": "The tag of the model"
              }
            },
            "required": [
              "name",
              "tag"
            ]
          },
          "attachments": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "example": "https://example.com/image.jpg",
                  "description": "The URL of the attachment"
                },
                "mimeType": {
                  "type": "string",
                  "example": "image/jpeg",
                  "description": "The MIME type of the attachment"
                },
                "id": {
                  "type": "string",
                  "example": "attachment_1234567890",
                  "description": "The ID of the attachment"
                }
              },
              "required": [
                "url",
                "mimeType",
                "id"
              ]
            }
          },
          "knowledge": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "1353151353531",
                  "description": "The ID of the knowledge"
                },
                "title": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "example": "My Resource",
                  "description": "The title of the knowledge"
                },
                "url": {
                  "type": "string",
                  "example": "https://example.com/resource.pdf",
                  "description": "The URL of the knowledge"
                },
                "type": {
                  "type": "string",
                  "example": "file",
                  "description": "The type of the knowledge"
                }
              },
              "required": [
                "id",
                "title",
                "url",
                "type"
              ]
            }
          },
          "workflowId": {
            "type": "string",
            "example": "workflow_1234567890",
            "description": "The ID of the workflow"
          },
          "createdAt": {
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z",
            "description": "The creation date of the run"
          }
        },
        "required": [
          "id",
          "origin",
          "status",
          "input",
          "output",
          "prompt",
          "inputTokens",
          "outputTokens",
          "cost",
          "durationInMs",
          "threadId",
          "model",
          "attachments",
          "knowledge",
          "workflowId",
          "createdAt"
        ]
      },
      "GetModelsResponse": {
        "type": "object",
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "gpt-4o",
                  "description": "The name of the model"
                },
                "tag": {
                  "type": "string",
                  "example": "gpt-4o",
                  "description": "The tag of the model"
                },
                "deprecated": {
                  "type": "boolean",
                  "example": false,
                  "description": "Whether the model is deprecated"
                },
                "hasVision": {
                  "type": "boolean",
                  "example": false,
                  "description": "Whether the model has vision capability"
                },
                "hasReasoningCapability": {
                  "type": "boolean",
                  "example": false,
                  "description": "Whether the model has reasoning capability"
                },
                "isOpenSource": {
                  "type": "boolean",
                  "example": false,
                  "description": "Whether the model is open source"
                },
                "contextWindowSize": {
                  "type": "number",
                  "example": 100000,
                  "description": "The context window size of the model"
                },
                "inputPerMillionTokenCost": {
                  "type": "number",
                  "example": 0.00015,
                  "description": "The input cost per million tokens of the model"
                },
                "outputPerMillionTokenCost": {
                  "type": "number",
                  "example": 0.0006,
                  "description": "The output cost per million tokens of the model"
                },
                "provider": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "OpenAI",
                      "description": "The name of the provider"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "name",
                "tag",
                "deprecated",
                "hasVision",
                "hasReasoningCapability",
                "isOpenSource",
                "contextWindowSize",
                "inputPerMillionTokenCost",
                "outputPerMillionTokenCost",
                "provider"
              ]
            }
          }
        },
        "required": [
          "models"
        ]
      },
      "CreateThreadResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "thread_1234567890",
            "description": "The ID of the created thread"
          },
          "name": {
            "type": "string",
            "example": "My Thread",
            "description": "The name of the thread"
          },
          "lookupKeys": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "example": [
              "user-123",
              "platform-web-app"
            ],
            "description": "The lookup keys of the thread"
          },
          "contextSlugs": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "example": [
              "special-docs",
              "admin-files"
            ],
            "description": "The context slugs of the thread"
          },
          "createdAt": {
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z",
            "description": "The creation date of the thread"
          },
          "updatedAt": {
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z",
            "description": "The last update date of the thread"
          }
        },
        "required": [
          "id",
          "name",
          "lookupKeys",
          "contextSlugs",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateThreadInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "My Thread",
            "description": "The name of the thread (optional, will auto-generate if not provided)"
          },
          "lookupKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "user-123",
              "platform-web-app"
            ],
            "description": "Optional lookup keys for finding the thread later"
          },
          "contextSlugs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "special-docs",
              "admin-files"
            ],
            "description": "Optional context slugs to append the context to the thread"
          },
          "workflowSlug": {
            "type": "string",
            "minLength": 1,
            "example": "my_great_workflow",
            "description": "The slug of the workflow this thread belongs to"
          }
        },
        "required": [
          "workflowSlug"
        ]
      },
      "GetThreadsByWorkflowResponse": {
        "type": "object",
        "properties": {
          "threads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetThreadResponse"
            },
            "description": "Array of threads for the workflow"
          }
        },
        "required": [
          "threads"
        ]
      },
      "GetThreadResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "thread_1234567890",
            "description": "The ID of the thread"
          },
          "name": {
            "type": "string",
            "example": "My Thread",
            "description": "The name of the thread"
          },
          "lookupKeys": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "example": [
              "user-123-session"
            ],
            "description": "The lookup keys of the thread"
          },
          "contextSlugs": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "example": [
              "special-docs",
              "admin-files"
            ],
            "description": "The context slugs of the thread"
          },
          "createdAt": {
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z",
            "description": "The creation date of the thread"
          },
          "updatedAt": {
            "type": "string",
            "example": "2021-01-01T00:00:00.000Z",
            "description": "The last update date of the thread"
          }
        },
        "required": [
          "id",
          "name",
          "lookupKeys",
          "contextSlugs",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetRunsByThreadResponse": {
        "type": "object",
        "properties": {
          "runs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetRunByIdResponse"
            },
            "description": "Array of runs in the thread"
          }
        },
        "required": [
          "runs"
        ]
      }
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ],
  "paths": {
    "/api/v1/generate/text": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateTextResponse"
                }
              }
            },
            "description": "Successfully generated content (we also return the run ID in the header X-Run-ID)"
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "403": {
            "description": "Forbidden - you do not have access to this workflow"
          },
          "404": {
            "description": "Not found - workflow not found"
          },
          "500": {
            "description": "Server error during generation"
          }
        },
        "operationId": "generateText",
        "parameters": [],
        "summary": "Generate text",
        "description": "Generate text for a specific workflow",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TextCompletionEventInput"
                  },
                  {
                    "$ref": "#/components/schemas/TextCompletionInput"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/api/v1/generate/object": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateObjectResponse"
                }
              }
            },
            "description": "Successfully generated object (we also return the run ID in the header X-Run-ID)"
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "403": {
            "description": "Forbidden - you do not have access to this workflow"
          },
          "404": {
            "description": "Not found - workflow not found"
          },
          "500": {
            "description": "Server error during generation"
          }
        },
        "operationId": "generateObject",
        "parameters": [],
        "summary": "Generate object",
        "description": "Generate a structured object for a specific workflow",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ObjectCompletionEventInput"
                  },
                  {
                    "$ref": "#/components/schemas/ObjectCompletionInput"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/api/v1/stream/text": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/StreamTextEvent"
                }
              }
            },
            "description": "Successfully streaming content"
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "403": {
            "description": "Forbidden - you do not have access to this workflow"
          },
          "404": {
            "description": "Not found - workflow not found"
          },
          "500": {
            "description": "Server error during generation"
          }
        },
        "operationId": "streamText",
        "parameters": [],
        "summary": "Stream text",
        "description": "Stream text generation for a specific workflow (we strongly recommend using the SDK for this)",
        "externalDocs": {
          "url": "https://docs.itz.am/sdks/javascript#stream-text",
          "description": "How to parse the response"
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextCompletionInput"
              }
            }
          }
        }
      }
    },
    "/api/v1/stream/object": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/StreamEvent"
                }
              }
            },
            "description": "Successfully streaming content"
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "403": {
            "description": "Forbidden - you do not have access to this workflow"
          },
          "404": {
            "description": "Not found - workflow not found"
          },
          "500": {
            "description": "Server error during generation"
          }
        },
        "operationId": "streamObject",
        "parameters": [],
        "summary": "Stream object",
        "description": "Stream object generation for a specific workflow (we strongly recommend using the SDK for this)",
        "externalDocs": {
          "url": "https://docs.itz.am/sdks/javascript#stream-object",
          "description": "How to parse the response"
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObjectCompletionInput"
              }
            }
          }
        }
      }
    },
    "/api/v1/runs/{id}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRunByIdResponse"
                }
              }
            },
            "description": "Successfully retrieved run details"
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "403": {
            "description": "Forbidden - you do not have access to this workflow"
          },
          "404": {
            "description": "Not found - workflow not found"
          },
          "500": {
            "description": "Server error during generation"
          }
        },
        "operationId": "getRunById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "run_1234567890",
              "description": "The ID of the run to retrieve"
            },
            "required": true
          }
        ],
        "summary": "Get run by ID",
        "description": "Retrieve the run details by its ID"
      }
    },
    "/api/v1/models": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetModelsResponse"
                }
              }
            },
            "description": "Successfully retrieved models"
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "403": {
            "description": "Forbidden - you do not have access to this workflow"
          },
          "404": {
            "description": "Not found - workflow not found"
          },
          "500": {
            "description": "Server error during generation"
          }
        },
        "operationId": "getModels",
        "parameters": [],
        "summary": "Get models",
        "description": "Retrieve all models available on Itzam"
      }
    },
    "/api/v1/threads": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateThreadResponse"
                }
              }
            },
            "description": "Successfully created thread"
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "403": {
            "description": "Forbidden - you do not have access to this workflow"
          },
          "404": {
            "description": "Not found - workflow not found"
          },
          "500": {
            "description": "Server error during generation"
          }
        },
        "operationId": "createThread",
        "parameters": [],
        "summary": "Create thread",
        "description": "Create a new thread for continuous messaging",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateThreadInput"
              }
            }
          }
        }
      }
    },
    "/api/v1/threads/workflow/{workflowSlug}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetThreadsByWorkflowResponse"
                }
              }
            },
            "description": "Successfully retrieved threads"
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "403": {
            "description": "Forbidden - you do not have access to this workflow"
          },
          "404": {
            "description": "Not found - workflow not found"
          },
          "500": {
            "description": "Server error during generation"
          }
        },
        "operationId": "getThreadsByWorkflow",
        "parameters": [
          {
            "in": "path",
            "name": "workflowSlug",
            "schema": {
              "type": "string",
              "example": "my_great_workflow",
              "description": "The slug of the workflow to get threads for"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "lookupKeys",
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "example": [
                "user-123",
                "platform-web-app"
              ],
              "description": "Optional lookup keys to filter threads"
            }
          }
        ],
        "summary": "Get threads by workflow",
        "description": "Retrieve all threads for a specific workflow, optionally filtered by lookup key"
      }
    },
    "/api/v1/threads/{threadId}/runs": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRunsByThreadResponse"
                }
              }
            },
            "description": "Successfully retrieved thread runs"
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "403": {
            "description": "Forbidden - you do not have access to this workflow"
          },
          "404": {
            "description": "Not found - workflow not found"
          },
          "500": {
            "description": "Server error during generation"
          }
        },
        "operationId": "getRunsByThread",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string",
              "example": "thread_1234567890",
              "description": "The ID of the thread to get runs for"
            },
            "required": true
          }
        ],
        "summary": "Get runs by thread",
        "description": "Retrieve all runs for a specific thread"
      }
    },
    "/api/v1/threads/{id}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetThreadResponse"
                }
              }
            },
            "description": "Successfully retrieved thread"
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "401": {
            "description": "Unauthorized - invalid API key"
          },
          "403": {
            "description": "Forbidden - you do not have access to this workflow"
          },
          "404": {
            "description": "Not found - workflow not found"
          },
          "500": {
            "description": "Server error during generation"
          }
        },
        "operationId": "getThreadById",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "summary": "Get thread by ID",
        "description": "Retrieve a thread by its ID"
      }
    }
  }
}